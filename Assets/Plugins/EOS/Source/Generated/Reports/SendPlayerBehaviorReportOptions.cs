// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.Reports
{
	/// <summary>
	/// Input parameters for the <see cref="ReportsInterface.SendPlayerBehaviorReport" /> function.
	/// </summary>
	public class SendPlayerBehaviorReportOptions
	{
		/// <summary>
		/// Product User ID of the reporting player
		/// </summary>
		public ProductUserId ReporterUserId { get; set; }

		/// <summary>
		/// Product User ID of the reported player.
		/// </summary>
		public ProductUserId ReportedUserId { get; set; }

		/// <summary>
		/// Category for the player report.
		/// </summary>
		public PlayerReportsCategory ReportCategory { get; set; }

		/// <summary>
		/// Arbitrary text string associated with the report as UTF-8 encoded null-terminated string.
		/// 
		/// The length of the description can be at maximum up to <see cref="ReportsInterface.ReportdescriptionMaxLength" /> bytes
		/// and any excess characters will be truncated upon sending the report.
		/// </summary>
		public string ReportDescription { get; set; }
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct SendPlayerBehaviorReportOptionsInternal : ISettable, System.IDisposable
	{
		private int m_ApiVersion;
		private System.IntPtr m_ReporterUserId;
		private System.IntPtr m_ReportedUserId;
		private PlayerReportsCategory m_ReportCategory;
		private System.IntPtr m_ReportDescription;

		public ProductUserId ReporterUserId
		{
			set
			{
				Helper.TryMarshalSet(ref m_ReporterUserId, value);
			}
		}

		public ProductUserId ReportedUserId
		{
			set
			{
				Helper.TryMarshalSet(ref m_ReportedUserId, value);
			}
		}

		public PlayerReportsCategory ReportCategory
		{
			set
			{
				m_ReportCategory = value;
			}
		}

		public string ReportDescription
		{
			set
			{
				Helper.TryMarshalSet(ref m_ReportDescription, value);
			}
		}

		public void Set(SendPlayerBehaviorReportOptions other)
		{
			if (other != null)
			{
				m_ApiVersion = ReportsInterface.SendplayerbehaviorreportApiLatest;
				ReporterUserId = other.ReporterUserId;
				ReportedUserId = other.ReportedUserId;
				ReportCategory = other.ReportCategory;
				ReportDescription = other.ReportDescription;
			}
		}

		public void Set(object other)
		{
			Set(other as SendPlayerBehaviorReportOptions);
		}

		public void Dispose()
		{
			Helper.TryMarshalDispose(ref m_ReporterUserId);
			Helper.TryMarshalDispose(ref m_ReportedUserId);
			Helper.TryMarshalDispose(ref m_ReportDescription);
		}
	}
}